---
title: "Desafio 10"
author: "Julia Folgueral - RA: 277178"
format: 
  html: 
    self-contained: true
editor: visual
---

```{r, echo = FALSE}
# Adicionar a data e hora que o html foi gerado:
cat("Este arquivo foi gerado em:", format(Sys.time(), "%d/%m/%Y %H:%M:%S"))
```


# Introdução ao Polars

```{python}
# Instalar bibliotecas
#!pip install polars
#!pip install fastexcel
```

```{python}
# Importar o polars
import polars as pl
```

```{python}
# Exemplo airports.csv
aeroportos = pl.read_csv("airports.csv",
                         columns = ["IATA_CODE", "CITY", "STATE"])
aeroportos.head(2)
```

```{python}
# Instalar uma biblioteca a mais
#!pip install pyarrow
```

```{python}
# Exemplo WDIEXCEL
#wdi = pl.read_excel("WDIEXCEL.xlsx", sheet_name = "Country",
                    #columns = ["Short Name", "Region"])
#wdi.head(2)
```

```{python}
# Operações com dataframes - exemplo
df = pl.DataFrame({
    "grupo": ["A", "A", "B", "B", "C"],
    "valor1": [10, 15, 10, None, 25],
    "valor2": [5, None, 20, 30, None]
})
df
```

```{python}
# Operando em valor1
df["valor1"]
```

```{python}
df["valor1"].mean()
```

```{python}
df["valor1"].drop_nulls()
```

```{python}
df["valor1"].drop_nulls().mean()
```

```{python}
# Operando em colunas
df.select([
  pl.col("valor1").mean().alias("media_v1"),
  pl.col("valor2").mean()
])
```

```{python}
df.group_by("grupo").agg([
  pl.col("valor1").mean().alias("media_valor1"),
  pl.col("valor2").min().alias("min_valor2")
]).sort("grupo")
```

```{python}
# Voltando para o flights
voos = pl.read_csv("flights.csv",
                   columns = ["AIRLINE", "ARRIVAL_DELAY", "DESTINATION_AIRPORT"],
                   schema_overrides = {"AIRLINE": pl.Utf8,
                             "ARRIVAL_DELAY": pl.Int32,
                             "DESTINATION_AIRPORT": pl.Utf8})
voos.shape
```

```{python}
voos.head(3)
```

```{python}
resultado = (
  voos.drop_nulls(["AIRLINE", "DESTINATION_AIRPORT", "ARRIVAL_DELAY"])
  .filter(
    pl.col("AIRLINE").is_in(["AA", "DL"]) &
    pl.col("DESTINATION_AIRPORT").is_in(["SEA", "MIA", "BWI"])
    )
    .group_by(["AIRLINE", "DESTINATION_AIRPORT"])
    .agg([
      (pl.col("ARRIVAL_DELAY") > 30).mean().alias("atraso_medio")
      ])
)
```

```{python}
resultado.sort("atraso_medio")
```

# Dados Relacionais

```{python}
# Criando dataframes - Dados clientes
clientes = pl.DataFrame({
    "cliente_id": [1, 2, 3, 4],
    "nome": ["Ana", "Bruno", "Clara", "Daniel"]
})

print(clientes)
```

```{python}
# Dados Compras
pedidos = pl.DataFrame({
    "pedido_id": [101, 102, 103, 104, 105],
    "cliente_id": [1, 2, 3, 1, 5],
    "valor": [100.50, 250.75, 75.00, 130.00, 79.00]
})

print(pedidos)
```

```{python}
# INNER JOIN
res_ij = clientes.join(pedidos, on="cliente_id", how="inner")
print(res_ij)
```

```{python}
# Left join
res_lj = clientes.join(pedidos, on="cliente_id", how="left")
print(res_lj)
```

```{python}
# Right join
res_rj = clientes.join(pedidos, on="cliente_id", how="right")
print(res_rj)
```

```{python}
# outer join
res_oj = clientes.join(pedidos, on="cliente_id", how="outer")
print(res_oj)
```

```{python}
# cross join
res_cj = clientes.join(pedidos, how="cross")
print(res_cj)
```
Pergunta 1: Qual é o valor médio das compras realizadas para cada cliente identificado?

```{python}
# Responder a pergunta 1
print(clientes)
```

```{python}
# Responder a pergunta 1
print(pedidos)
```

```{python}
# Responder a pergunta 1
res = res_ij.group_by(["nome", "cliente_id"]).agg(pl.col("valor").mean())
print(res)
```

Pergunta 2: Informe os nomes e a quantidade de compras com valor mínimo de $100 realizadas por cada cliente.

```{python}
# Responder a pergunta 2
print(clientes)
```

```{python}
# Responder a pergunta 2
print(pedidos)
```

```{python}
# Responder a pergunta 2
res = (res_oj.with_columns(pl.col("valor") > 100)
       .group_by("nome")
       .agg(pl.col("valor").sum()))
print(res)
```

```{python}
# JOIN com Múltiplas Colunas como Chave
vendas = pl.DataFrame({
    "id_venda": [1, 2, 3],
    "id_cl": [1, 2, 1],
    "id_prod": [101, 102, 103],
    "qtde": [2, 1, 1]
})

detalhes_pedidos = pl.DataFrame({
    "id_ped": [201, 202, 203],
    "cl_id": [1, 2, 1],
    "id_prod": [101, 102, 104],
    "valor": [50.00, 75.00, 100.00]
})
```

```{python}
# Detalhes das Tabelas
print(vendas)
```

```{python}
# Detalhes das Tabelas
print(detalhes_pedidos)
```

```{python}
# Realizando um join com multiplas colunas

final = vendas.join(detalhes_pedidos,
                    left_on = ["id_cl", "id_prod"],
                    right_on = ["cl_id", "id_prod"],
                    how = "inner")
print(final)
```
